{"version":3,"sources":["src/index.js"],"names":["canvas","document","querySelector","ctx","getContext","width","height","faceImageUrls","currentFaceImage","Image","crossOrigin","src","currentFaceEffect","brainImageUrls","brainImages","currentBrainImage","forEach","url","img","push","face_color","brain_left","brain_right","brain_random","download","face_color_change","console","log","render","addEventListener","brain_count","brain_left_change","length","brain_right_change","brain_random_change","Math","floor","random","downloadImage","toBlob","blob","window","saveAs","clearRect","beginPath","rect","fillStyle","fill","filter","value","drawImage","onload"],"mappings":";AACA,IAAIA,EAASC,SAASC,cAAc,aAChCC,EAAMH,EAAOI,WAAW,MAC5BJ,EAAOK,MAAQ,KACfL,EAAOM,OAAS,KAKhB,IAAIC,EAAgB,CAAC,kBAAmB,0BACpCC,EAAmB,IAAIC,MAC3BD,EAAiBE,YAAc,YAC/BF,EAAiBG,IAAMJ,EAAc,GAErC,IAAIK,EAAoB,IAAIH,MAAMF,EAAc,IAChDK,EAAkBF,YAAc,YAChCE,EAAkBD,IAAMJ,EAAc,GAGtC,IAAIM,EAAiB,CACnB,mBACA,wBACA,0BACA,4BAEEC,EAAc,GACdC,EAAoB,IAAIN,MAAM,oBAClCM,EAAkBL,YAAc,YAChCG,EAAeG,QAAQ,SAACC,GAClBC,IAAAA,EAAM,IAAIT,MACdS,EAAIP,IAAMM,EACVH,EAAYK,KAAKD,KAKnB,IAAIE,EAAanB,SAASC,cAAc,sBAIpCmB,EAAapB,SAASC,cAAc,eACpCoB,EAAcrB,SAASC,cAAc,gBACrCqB,EAAetB,SAASC,cAAc,iBAGtCsB,EAAWvB,SAASC,cAAc,aAGhCuB,EAAoB,WACxBC,QAAQC,IAAI,yBACZC,KAEFR,EAAWS,iBAAiB,QAASJ,GASrC,IAAIK,EAAc,EAEZC,EAAoB,WACxBD,GAAehB,EAAYkB,OAASF,EAAc,GAAKhB,EAAYkB,OACnEjB,EAAoBD,EAAYgB,GAChCF,IACAF,QAAQC,IAAIG,IAEdT,EAAWQ,iBAAiB,QAASE,GAErC,IAAME,EAAqB,WACzBH,GAAehB,EAAYkB,OAASF,EAAc,GAAKhB,EAAYkB,OACnEjB,EAAoBD,EAAYgB,GAChCF,IACAF,QAAQC,IAAIG,IAEdR,EAAYO,iBAAiB,QAASI,GAEtC,IAAMC,EAAsB,WAC1BJ,EAAcK,KAAKC,MAAMD,KAAKE,SAAWvB,EAAYkB,QACrDjB,EAAoBD,EAAYgB,GAChCF,IACAF,QAAQC,IAAIG,IAEdP,EAAaM,iBAAiB,QAASK,GAGvC,IAAMI,EAAgB,WACpBZ,QAAQC,IAAI,kBACZ3B,EAAOuC,OAAO,SAAUC,GACtBd,QAAQC,IAAIa,GACZC,OAAOC,OAAOF,EAAM,gBAGxBhB,EAASK,iBAAiB,QAASS,GAEnC,IAAMV,EAAS,WAEbzB,EAAIwC,UAAU,EAAG,EAAG3C,EAAOK,MAAOL,EAAOM,QACzCH,EAAIyC,YACJzC,EAAI0C,KAAK,EAAG,EAAG,KAAM,MACrB1C,EAAI2C,UAAY,QAChB3C,EAAI4C,OACJ5C,EAAI6C,OAAuB5B,cAAAA,OAAAA,EAAW6B,MAPnB,QAUnB9C,EAAI+C,UAAU1C,EAAkB,EAAG,EAAG,KAAM,MAC5CA,EAAiBE,YAAc,YAC/BP,EAAI+C,UAAUnC,EAAmB,EAAG,EAAG,KAAM,MAC7CA,EAAkBL,YAAc,aAIlCkB,IACApB,EAAiB2C,OAASvB","file":"src.4bfd3596.js","sourceRoot":"..","sourcesContent":["// canvas info\nlet canvas = document.querySelector(\"#myCanvas\");\nlet ctx = canvas.getContext(\"2d\");\ncanvas.width = 1600;\ncanvas.height = 1600;\n\n// Creating canvas images\n\n// face\nlet faceImageUrls = [\"assets/face.png\", \"assets/face_effect.png\"];\nlet currentFaceImage = new Image();\ncurrentFaceImage.crossOrigin = \"anonymous\"; //for Blob security feature\ncurrentFaceImage.src = faceImageUrls[0]; // do this separately for initial render\n\nlet currentFaceEffect = new Image(faceImageUrls[1]);\ncurrentFaceEffect.crossOrigin = \"anonymous\"; //for Blob security feature\ncurrentFaceEffect.src = faceImageUrls[1]; // do this separately for initial render\n\n// brain\nlet brainImageUrls = [\n  \"assets/brain.png\",\n  \"assets/brain_semi.png\",\n  \"assets/brain_galaxy.png\",\n  \"assets/brain_network.png\"\n];\nlet brainImages = [];\nlet currentBrainImage = new Image(\"assets/brain.png\");\ncurrentBrainImage.crossOrigin = \"anonymous\";\nbrainImageUrls.forEach((url) => {\n  let img = new Image();\n  img.src = url;\n  brainImages.push(img);\n});\n\n// selectors\n// face\nlet face_color = document.querySelector(\"#face-color-slider\");\n// let face_blur = document.querySelector(\"#face-blur-slider\");\n\n//brain\nlet brain_left = document.querySelector(\"#brain-left\");\nlet brain_right = document.querySelector(\"#brain-right\");\nlet brain_random = document.querySelector(\"#brain-random\");\n\n//download button\nlet download = document.querySelector(\"#download\");\n\n// event listeners for face\nconst face_color_change = () => {\n  console.log(\"color input happened!\");\n  render();\n};\nface_color.addEventListener(\"input\", face_color_change);\n\n// const face_blur_change = () => {\n//   console.log(\"blur input happened!\");\n//   render();\n// };\n// face_blur.addEventListener(\"input\", face_blur_change);\n\n// event listener for brain\nlet brain_count = 0;\n\nconst brain_left_change = () => {\n  brain_count = (brainImages.length + brain_count - 1) % brainImages.length;\n  currentBrainImage = brainImages[brain_count];\n  render(); // call render every time button is clicked\n  console.log(brain_count);\n};\nbrain_left.addEventListener(\"click\", brain_left_change);\n\nconst brain_right_change = () => {\n  brain_count = (brainImages.length + brain_count + 1) % brainImages.length;\n  currentBrainImage = brainImages[brain_count];\n  render(); // call render every time button is clicked\n  console.log(brain_count);\n};\nbrain_right.addEventListener(\"click\", brain_right_change);\n\nconst brain_random_change = () => {\n  brain_count = Math.floor(Math.random() * brainImages.length);\n  currentBrainImage = brainImages[brain_count];\n  render(); // call render every time button is clicked\n  console.log(brain_count);\n};\nbrain_random.addEventListener(\"click\", brain_random_change);\n\n//download image button\nconst downloadImage = () => {\n  console.log(\"download image\");\n  canvas.toBlob(function (blob) {\n    console.log(blob);\n    window.saveAs(blob, \"brain.png\"); //use FileSaver.js library\n  });\n};\ndownload.addEventListener(\"click\", downloadImage);\n\nconst render = () => {\n  //update\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.beginPath();\n  ctx.rect(0, 0, 1600, 1600);\n  ctx.fillStyle = \"black\";\n  ctx.fill();\n  ctx.filter = `hue-rotate(${face_color.value}deg)`;\n  // ctx.filter = `hue-rotate(${face_color.value}deg) blur(${face_blur.value}px)`;\n\n  ctx.drawImage(currentFaceImage, 0, 0, 1600, 1600);\n  currentFaceImage.crossOrigin = \"anonymous\";\n  ctx.drawImage(currentBrainImage, 0, 0, 1600, 1600);\n  currentBrainImage.crossOrigin = \"anonymous\";\n  // ctx.drawImage(currentFaceEffect, 0, 0, 1600, 1600);\n};\n\nrender(); //initial render\ncurrentFaceImage.onload = render; //call image when it's loaded (initial)\n"]}